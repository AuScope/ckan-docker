#!/bin/sh

# Add ckan.datapusher.api_token to the CKAN config file (updated with corrected value later)
ckan config-tool $CKAN_INI ckan.datapusher.api_token=xxx
APP_DIR=$(dirname "$CKAN_INI")
SRC_EXTENSIONS_DIR=$APP_DIR/src_extensions
echo "Ckan app directory: $APP_DIR"

# Set up the Secret key used by Beaker and Flask
# This can be overriden using a CKAN___BEAKER__SESSION__SECRET env var
if grep -E "beaker.session.secret ?= ?$" ckan.ini
then
    echo "Setting beaker.session.secret in ini file"
    ckan config-tool $CKAN_INI "beaker.session.secret=$(python3 -c 'import secrets; print(secrets.token_urlsafe())')"
    ckan config-tool $CKAN_INI "WTF_CSRF_SECRET_KEY=$(python3 -c 'import secrets; print(secrets.token_urlsafe())')"
    JWT_SECRET=$(python3 -c 'import secrets; print("string:" + secrets.token_urlsafe())')
    ckan config-tool $CKAN_INI "api_token.jwt.encode.secret=${JWT_SECRET}"
    ckan config-tool $CKAN_INI "api_token.jwt.decode.secret=${JWT_SECRET}"
fi



### AUTH Settings ###
if echo "$CKAN__PLUGINS" | grep -q "igsn_theme"; then
    #ckan config-tool $CKAN_INI "ckan.auth.allow_dataset_collaborators = True"
    ckan config-tool $CKAN_INI "ckan.auth.user_create_groups = false"
    #ckan config-tool $CKAN_INI "ckan.auth.create_unowned_dataset = True"
    ckan config-tool $CKAN_INI "ckan.auth.user_create_organizations = false"
    # ckan config-tool $CKAN_INI "ckan.dataset.create.require.resource = true"
    ckan config-tool $CKAN_INI "ckan.dataset.create.require.resource = false"
    # ckan config-tool $CKAN_INI "ckan.dataset.create_on_ui_requires_resources = true"
    ckan config-tool $CKAN_INI "ckan.dataset.create_on_ui_requires_resources = false"

    export CKAN___SCHEMING__DATASET_SCHEMAS="ckanext.igsn_theme:sample_repository_schema.yaml"

    ckan config-tool $CKAN_INI "ckan.locale_default = en_AU"
else
    #ckan config-tool $CKAN_INI "ckan.auth.allow_dataset_collaborators = True"
    ckan config-tool $CKAN_INI "ckan.auth.user_create_groups = false"
    #ckan config-tool $CKAN_INI "ckan.auth.create_unowned_dataset = True"
    ckan config-tool $CKAN_INI "ckan.auth.user_create_organizations = false"

    export CKAN___SCHEMING__DATASET_SCHEMAS="ckanext.auscope_theme:data_repository_schema.yaml"
fi

# Compiling translations for the custom extension
if echo "$CKAN__PLUGINS" | grep -q "igsn_theme"; then
    echo "Compiling translations for custom CKAN extensions..."

    for i in $SRC_EXTENSIONS_DIR/*; do
        echo "Checking directory: $i"

        # Adjust the path to where your i18n directory actually is
        if [ -d "$i/ckanext/igsn_theme/i18n" ]; then
            echo "Found i18n directory in $i/ckanext/igsn_theme/i18n"

            # Navigate to each language directory and compile the .po files
            for lang in "$i/ckanext/igsn_theme/i18n/"*; do
                if [ -d "$lang" ]; then
                    echo "Compiling translations for language directory: $lang"
                    msgfmt "$lang/LC_MESSAGES/ckan.po" -o "$lang/LC_MESSAGES/ckan.mo"
                    echo "Compiled translations for $lang"
                    echo "Copying compiled lang to the src directory"
                    cp -r $SRC_EXTENSIONS_DIR/ckanext-igsn-theme/ckanext/igsn_theme/i18n/en_AU/LC_MESSAGES/* $APP_DIR/src/ckan/ckan/i18n/en_AU/LC_MESSAGES/
                fi
            done
        else
            echo "i18n directory not found in $i/ckanext/igsn_theme/i18n"
        fi
    done
fi


# This seems to be necessary as the envvar equivlents are not resolved
ckan config-tool $CKAN_INI "scheming.presets = ckanext.scheming:presets.json ckanext.repeating:presets.json ckanext.composite:presets.json"
ckan config-tool $CKAN_INI "scheming.dataset_schemas = $CKAN___SCHEMING__DATASET_SCHEMAS"

# DOI config
ckan config-tool $CKAN_INI "ckanext.doi.account_name = my-account-name"
ckan config-tool $CKAN_INI "ckanext.doi.account_password = my-password"
ckan config-tool $CKAN_INI "ckanext.doi.prefix = 12.34567"
ckan config-tool $CKAN_INI "ckanext.doi.publisher = my-publisher"
ckan config-tool $CKAN_INI "ckanext.doi.test_mode = True" # Set to False for production DOI minting

ckan config-tool $CKAN_INI "licenses_group_url= $CKAN__LICENSES_GROUP_URL"

# Run the prerun script to init CKAN and create the default admin user
#su ckan -c "/usr/bin/python3 prerun.py"
python3 prerun.py

echo "Set up ckan.datapusher.api_token in the CKAN config file"
ckan config-tool $CKAN_INI "ckan.datapusher.api_token=$(ckan -c $CKAN_INI user token add ckan_admin datapusher | tail -n 1 | tr -d '\t')"

# Run any startup scripts provided by images extending this one
if [[ -d "/docker-entrypoint.d" ]]
then
    for f in /docker-entrypoint.d/*; do
        case "$f" in
            *.sh)     echo "$0: Running init file $f"; . "$f" ;;
            *.py)     echo "$0: Running init file $f"; python3 "$f"; echo ;;
            *)        echo "$0: Ignoring $f (not an sh or py file)" ;;
        esac
        echo
    done
fi

# Delay initializing DB so DOI tables exist
ckan -c $CKAN_INI doi initdb

# Add AuScope organization (will throw constraint error if org exists but won't break anything)
echo "Adding AuScope organization to DB"
export PGPASSWORD=$CKAN_DB_PASSWORD
export PGUSER=$CKAN_DB_USER
export PGDATABASE=$CKAN_DB
DB_HOST = $(echo $CKAN_SQLALCHEMY_URL | cut -d '@' -f2 | cut -d':' -f1)
psql -h $DB_HOST -p 5432 -f create_auscope_org.sql
# psql -h db -p 5432 -f create_auscope_org.sql

# Set the common uwsgi options
UWSGI_OPTS="--plugins http,python \
            --socket /tmp/uwsgi.sock \
            --wsgi-file /srv/app/wsgi.py \
            --module wsgi:application \
            --uid 92 --gid 92 \
            --http 0.0.0.0:5000 \
            --master --enable-threads \
            --lazy-apps \
            -p 2 -L -b 32768 --vacuum \
            --harakiri $UWSGI_HARAKIRI"

if [ $? -eq 0 ]
then
    # Start supervisord
    supervisord --configuration /etc/supervisord.conf &
    # Start uwsgi
    su ckan -c "/usr/sbin/uwsgi $UWSGI_OPTS"
else
  echo "[prerun] failed...not starting CKAN."
fi
